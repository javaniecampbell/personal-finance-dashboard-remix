generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  passwordHash      String
  name              String?
  phone             String?
  address           String?
  dateOfBirth       DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  xata_updatedat    DateTime           @default(now()) @db.Timestamptz(6)
  xata_id           String             @unique(map: "User__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version      Int                @default(0)
  xata_createdat    DateTime           @default(now()) @db.Timestamptz(6)
  accounts          Account[]
  bills             Bill[]
  budgets           Budget[]
  connectedAccounts ConnectedAccount[]
  supportTickets    SupportTicket[]
  transactions      Transaction[]
  settings          UserSettings?
}

model UserSettings {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  theme                  Theme    @default(light)
  language               String   @default("en")
  currency               String   @default("USD")
  notifyOnLowBalance     Boolean  @default(true)
  notifyOnBillDue        Boolean  @default(true)
  notifyOnBudgetExceeded Boolean  @default(true)
  lowBalanceThreshold    Float    @default(100)
  xata_updatedat         DateTime @default(now()) @db.Timestamptz(6)
  xata_id                String   @unique(map: "UserSettings__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version           Int      @default(0)
  xata_createdat         DateTime @default(now()) @db.Timestamptz(6)
  user                   User     @relation(fields: [userId], references: [id])
}

model Transaction {
  id             String          @id @default(cuid())
  userId         String
  amount         Float
  description    String
  category       String
  date           DateTime
  type           TransactionType
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  xata_version   Int             @default(0)
  xata_createdat DateTime        @default(now()) @db.Timestamptz(6)
  xata_updatedat DateTime        @default(now()) @db.Timestamptz(6)
  xata_id        String          @unique(map: "Transaction__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  budgetId       String?
  budget         Budget?         @relation(fields: [budgetId], references: [id])
  user           User            @relation(fields: [userId], references: [id])
}

model BudgetHistory {
  id             String   @id @default(uuid())
  budgetId       String
  date           DateTime
  budgetedAmount Float
  actualAmount   Float
  performance    Float
  createdAt      DateTime @default(now())
  budget         Budget   @relation(fields: [budgetId], references: [id])

  @@index([budgetId, date])
}

model Budget {
  id             String          @id @default(cuid())
  userId         String
  name           String
  amount         Float
  category       String
  period         BudgetPeriod
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  xata_id        String          @unique(map: "Budget__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int             @default(0)
  xata_createdat DateTime        @default(now()) @db.Timestamptz(6)
  xata_updatedat DateTime        @default(now()) @db.Timestamptz(6)
  user           User            @relation(fields: [userId], references: [id])
  BudgetHistory  BudgetHistory[]
  transactions   Transaction[]
}

model Bill {
  id             String         @id @default(cuid())
  userId         String
  name           String
  amount         Float
  dueDate        DateTime
  category       String
  status         BillStatus
  recurring      Boolean        @default(false)
  frequency      BillFrequency?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  xata_id        String         @unique(map: "Bill__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int            @default(0)
  xata_createdat DateTime       @default(now()) @db.Timestamptz(6)
  xata_updatedat DateTime       @default(now()) @db.Timestamptz(6)
  paidDate       DateTime?
  user           User           @relation(fields: [userId], references: [id])
}

model SupportTicket {
  id             String         @id @default(cuid())
  userId         String
  subject        String
  description    String
  status         TicketStatus   @default(open)
  priority       TicketPriority
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  xata_id        String         @unique(map: "SupportTicket__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int            @default(0)
  xata_createdat DateTime       @default(now()) @db.Timestamptz(6)
  xata_updatedat DateTime       @default(now()) @db.Timestamptz(6)
  user           User           @relation(fields: [userId], references: [id])
}

model ConnectedAccount {
  id             String   @id @default(cuid())
  userId         String
  provider       String
  accountId      String
  accountName    String
  accountType    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  xata_id        String   @unique(map: "ConnectedAccount__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
  user           User     @relation(fields: [userId], references: [id])
}

model FAQ {
  id             String   @id @default(cuid())
  question       String
  answer         String
  order          Int
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
  xata_id        String   @unique(map: "FAQ__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)
}

model Account {
  id             String      @id @default(uuid())
  userId         String
  name           String
  type           AccountType
  balance        Float
  currency       String      @default("USD")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  xata_id        String      @unique(map: "Account__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int         @default(0)
  xata_createdat DateTime    @default(now()) @db.Timestamptz(6)
  xata_updatedat DateTime    @default(now()) @db.Timestamptz(6)
  user           User        @relation(fields: [userId], references: [id])
}

enum Theme {
  light
  dark
}

enum TransactionType {
  income
  expense
}

enum BudgetPeriod {
  weekly
  monthly
  yearly
}

enum BillStatus {
  unpaid
  paid
}

enum BillFrequency {
  weekly
  monthly
  yearly
}

enum TicketStatus {
  open
  in_progress
  resolved
  closed
}

enum TicketPriority {
  low
  medium
  high
}

enum AccountType {
  checking
  savings
  credit
  investment
  loan
}
